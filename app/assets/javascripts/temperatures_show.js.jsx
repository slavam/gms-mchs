class ParamsForm extends React.Component{
  constructor(props) {
    super(props);
    this.state = {
      calcDate: '',
      author: 'Иванов'
    };
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleAuthorChange = this.handleAuthorChange.bind(this);
    this.handleDateChange = this.handleDateChange.bind(this);
  }
  handleAuthorChange(e) {
    this.setState({author: e.target.value});
  }
  handleDateChange(e) {
    this.setState({calcDate: e.target.value});
  }
  handleSubmit(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var calcDate = this.state.calcDate.trim();
    if (!calcDate) { // || !author) {
      return;
    }
    this.props.onParamsSubmit({author: author, calcDate: calcDate});
    this.setState({author: 'Иванов', calcDate: ''});
  }
  render() {
    return (
      <form className="paramsForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Синоптик..."
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Дата..."
          value={this.state.text}
          onChange={this.handleDateChange}
        />
        <input type="submit" value="Пересчитать" />
      </form>
    );
  }
}
class TempRow extends React.Component{
  render() {
    var stations = {34622: "Амвросиевка", 34524: "Дебальцево", 34519: "Донецк", 34615: "Волноваха", 34712: "Мариуполь"};
    return (
      <tr>
        <td>{stations[this.props.station]}</td>
        <td>{this.props.vector[0]}</td>
        <td>{this.props.vector[1]}</td>
        <td>{this.props.vector[2]}</td>
        <td>{this.props.vector[3]}</td>
        <td>{this.props.vector[4]}</td>
        <td>{this.props.vector[5]}</td>
        <td>{this.props.vector[6]}</td>
        <td>{this.props.vector[7]}</td>
      </tr>
    );
  }
}
class TemperaturesTable extends React.Component{
  render() {
    var rows = [];
    var temps;
    temps = this.props.temperatures;
    
    ['34622', '34524', '34519', '34615', '34712'].forEach(function(s) {
      rows.push(<TempRow station={s} vector={[temps[s+'-09'], temps[s+'-12'], temps[s+'-15'], temps[s+'-18'], temps[s+'-21'], temps[s+'-00'], temps[s+'-03'], temps[s+'-06']]} key={s}/>);
    });
  
    return (
      <table>
        <thead>
          <tr>
            <th>Метеостанция</th>
            <th>09</th>
            <th>12</th>
            <th>15</th>
            <th>18</th>
            <th>21</th>
            <th>00</th>
            <th>03</th>
            <th>06</th>
            <th>Средняя</th>
          </tr>
        </thead>
        <tbody>{rows}</tbody>
      </table>
    );
  }
}
class TemperaturesShow extends React.Component{
  constructor(props) {
    super(props);
    this.state = {
      calcDate: this.props.calc_date,
      temperatures: this.props.temperatures
    };
    this.handleParamsSubmit = this.handleParamsSubmit.bind(this);
  }

  handleParamsSubmit(params) {
    // var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    // comment.id = Date.now();
    // var newComments = comments.concat([comment]);
    // this.setState({data: newComments});
    // alert(params.calcDate)
    $.ajax({
      type: 'GET',
      url: "get_temps?calc_date="+params.calcDate
      }).done(function(data) {
        // alert(data)
        this.setState({
          temperatures: data
        });
      }.bind(this))
      .fail(function(jqXhr) {
        console.log('failed to register');
      });
  }
  render(){
    return(
      <div>
        <ParamsForm onParamsSubmit={this.handleParamsSubmit} />
        <TemperaturesTable temperatures={this.state.temperatures} />
      </div>
    );
  }
}